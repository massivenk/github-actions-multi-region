### Reusable workflow to plan terraform deployment, create artifact and upload to workflow artifacts for consumption ###
name: "Build_TF_Plan"
on:
  workflow_call:
    inputs:
      path:
        description: 'Specifies the path of the root terraform module.'
        required: true
        type: string
      tf_version:
        description: 'Specifies version of Terraform to use. e.g: 1.1.0 Default=latest.'
        required: false
        type: string
        default: latest
      gh_environment:
        description: 'Specifies the GitHub deployment environment.'
        required: false
        type: string
        default: null
      tf_vars_file:
        description: 'Specifies the Terraform TFVARS file.'
        required: true
        type: string
    secrets:
      cli_config_credentials_token:
        description: 'cli config credentials token'
        required: true

jobs:
  build-plan:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: SNS
        
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0
        
      - name: IAM Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
         role-to-assume: ${{ secrets.AWS_ROLE }}
         aws-region: ${{ secrets.AWS_REGION }}
         role-session-name: GitHub-OIDC-TERRAFORM
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
        terraform_version: 1.2.5
 
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
 
      - name: Terraform Init
        id: init
        env:
        AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
        AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"
 
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
 
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        if: github.event_name == 'pull_request'
        continue-on-error: true
 
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
        
        const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
        #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
        #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
        <details><summary>Validation Output</summary>
 
        \`\`\`\n
        ${{ steps.validate.outputs.stdout }}
        </details>
 
        #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
 
       <details><summary>Show Plan</summary>
       
        \`\`\`\n
        ${process.env.PLAN}
        \`\`\`
 
        </details>
 
       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
 
        github.rest.issues.createComment({
        issue_number: context.issue.number,
        owner: context.repo.owner,
       repo: context.repo.repo,
       body: output
        }) 
 
       - name: Terraform Plan Status
       if: steps.plan.outcome == 'failure'
       run: exit 1
 
 
